I will use a Pom file that has been initialised with all required dependencies - feel free to give a whirlwind tour

1. start with spring boot class:

    @SpringBootApplication
    public class CircuitBreakerReadingApplication {

        public static void main(final String[] args) {
            SpringApplication.run(CircuitBreakerReadingApplication.class, args);
        }
    }

2. Setup test class

    @ExtendWith(SpringExtension.class)
    @SpringBootTest(webEnvironment=SpringBootTest.WebEnvironment.RANDOM_PORT)
    class CircuitBreakerReadingApplicationTests {

        @Autowired
        private TestRestTemplate testRestTemplate;

        @Autowired
        private RestTemplate remoteServiceRestTemplate;

        private MockRestServiceServer remoteServer;

        @BeforeEach
        public void setup() {
            remoteServer = MockRestServiceServer.createServer(remoteServiceRestTemplate);
        }

        @AfterEach
        public void teardown() {
            remoteServer = null;
        }
    }

3. Add happy path rest call test and run

    @Test
    void toRead() {
        final String books = testRestTemplate.getForObject("/to-read", String.class);
        assertThat(books).isEqualTo("Please read: Beano");
    }

    ... and run. It will fail (with a lot of errors) because the RestTemplate is not defined.

    Add this to CircuitBreakerReadingApplication

    @Configuration
    class Config {
        @Bean
        public RestTemplate rest(final RestTemplateBuilder builder) {
            return builder.build();
        }
    }

    This will give a 404.

4. Add code to pass the test - specifically a RestController class

    @RestController
    public class BookService {

        @RequestMapping("/to-read")
        public String readingList() {
            return "Please read: Beano";
        }
    }

So the test, such as it is, now works. However, it's not very useful because the server is returning a
hard-coded response. What happens if we want to return some other list?

5. So now we add another test which is enough for us to assume a general rule applies (instead of
a series of hard-coded implementations). Add an expectation and verification for and of the mock
remote service.

    @Test
    void toReadRedirectsToTheRemoteService() {
        remoteServer.expect(requestTo("http://localhost:8090/recommended"))
            .andExpect(method(HttpMethod.GET))
            .andRespond(withSuccess("Beano", MediaType.TEXT_PLAIN));
        final String books = testRestTemplate.getForObject("/to-read", String.class);
        remoteServer.verify();
        assertThat(books).isEqualTo("Please read: Beano");
    }

and run the tests. The new test will fail.

6.  Add the code that calls the remote server to our service

    @RequestMapping("/to-read")
    public String readingList() {
        final URI uri = URI.create(bookstoreServer + "/recommended");

        return "Please read: " + restTemplate.getForObject(uri, String.class);
    }

... and add the restTemplate and the server object for the remote service to the class

    private final RestTemplate restTemplate;
    private final String bookstoreServer;

    public BookService(@Value("${bookstore.server}") final String bookstoreServer, final RestTemplate restTemplate) {
        this.bookstoreServer = bookstoreServer;
        this.restTemplate = restTemplate;
    }

Exclude the original test because it will no longer work as it supplies no expectations for the remote service.
Now run the tests again!

7. Add failing test - add an unhandled error on the mocked REST call

    @Test
    void toReadFailure() {
        remoteServer.expect(requestTo("http://localhost:8090/recommended"))
            .andExpect(method(HttpMethod.GET))
            .andRespond(withServerError());
        final String books = testRestTemplate.getForObject("/to-read", String.class);
        remoteServer.verify();
        assertThat(books).isEqualTo("Please read: Cloud Native Java (O'Reilly) - returned as a fallbackMethod via Hystrix because the Bookstore service is not stable");
    }

8. Add Hystrix to pass failing test

Add this to CircuitBreakReadingApplication

    @EnableCircuitBreaker

Prefix BookService.readingList with

    @HystrixCommand(fallbackMethod="reliable")

and add

    private String reliable() {
        return "Please read: Cloud Native Java (O'Reilly) - returned as a fallbackMethod via Hystrix because the Bookstore service is not stable";
    }

9. Prove test now works by executing the fallback method

10. Add test for short delay which will fail as there is no hystrix config yet for the timeout value (so it will execute the fallback
because the default timeout is between 1 and 2 seconds)

    @Test
    void toReadShortDelay() {
        remoteServer.expect(requestTo("http://localhost:8090/recommended"))
            .andExpect(method(HttpMethod.GET))
            .andRespond(request -> {
                try {
                    Thread.sleep(TimeUnit.SECONDS.toMillis(2));
                } catch( final InterruptedException ignored) {

                }
                return new MockClientHttpResponse("Beano Annual 2020".getBytes(), HttpStatus.OK);
            });
        final String books = testRestTemplate.getForObject("/to-read", String.class);
        remoteServer.verify();
        assertThat(books).isEqualTo("Please read: Beano Annual 2020");
    }

11. add config line to properties so that the app times out after 5 seconds

    hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=5000

12. rerun above test and prove it passes

13. add demonstrator test with long timeout to show it returning the fallback value

    @Test
    void toReadLongDelay() {
        remoteServer.expect(requestTo("http://localhost:8090/recommended"))
            .andExpect(method(HttpMethod.GET))
            .andRespond(request -> {
                try {
                    Thread.sleep(TimeUnit.SECONDS.toMillis(10));
                } catch(final InterruptedException ignored) {

                }
                return new MockClientHttpResponse("Beano Annual 2020".getBytes(), HttpStatus.OK);
            });
        final String books = testRestTemplate.getForObject("/to-read", String.class);
        remoteServer.verify();
        // this will fail because of the timeout switch
        assertThat(books).isEqualTo("Please read: Beano Annual 2020");
        //assertThat(books).isEqualTo("Please read: Cloud Native Java (O'Reilly) - returned as a fallbackMethod via Hystrix because the Bookstore service is not stable");
    }

    This will fail with the first assertion because the timeout is triggered and the Spring runtime
    interrupts the client request and returns the fallback value. Change the assertion to the second one
    and then the test will pass, returning the fallback value.

    NB - interesting to note while the timeout is 10 seconds, because of hystrix config the test finishes in 5 seconds


14. there we have it - a shiny new TDD-built rest service